const Joi = require("joi");
const mongoose = require("mongoose");

const Traffic = mongoose.model(
  "Traffic",
  new mongoose.Schema({
    id: { type: Number, required: true },
    guid: { type: String, optional: true },
    title: { type: String, optional: true },
    description: { type: String, optional: true },
    delayMinutes: { type: Number, required: true },
    validFrom: { type: String, optional: true },
    validTo: { type: String, optional: true },
    createdAt: { type: String, optional: true },
    changedAt: { type: String, optional: true },
    dbUpdate: { type: String, optional: true },
    city: { type: String, optional: true },
    street: { type: String, optional: true },
    houseNo: { type: String, optional: true },
    district_ID: { type: Number, optional: true },
    district_Name: { type: String, optional: true },
    district_AreaLevel: { type: Number, required: true },
    district_Parent_ID: { type: Number, required: true },
    district_Parent_Name: { type: String, required: true },
    district_Parent_Extent_XMIN: { type: Number, required: true },
    district_Parent_Extent_XMAX: { type: Number, required: true },
    district_Parent_Extent_YMIN: { type: Number, required: true },
    district_Parent_Extent_YMAX: { type: Number, required: true },
    district_Parent_Extent_SpatialReference_Wkid: {
      type: Number,
      required: true,
    },
    category_Code: { type: String, optional: true },
    category_Name: { type: String, optional: true },
    status_Code: { type: String, optional: true },
    status_Name: { type: String, optional: true },
    Location_Lines_Paths: { type: Array, optional: true },
    Location_Polygons_Paths_Rings: { type: Array, optional: true },
    Location_Points_Geometry_X: { type: Number, optional: true },
    Location_Points_Geometry_Y: { type: Number, optional: true },
    AlternateRoute_Lines_Geometry_Paths: { type: Array, optional: true },
    AlternateRoute_Points_Geometry_X: { type: Number, optional: true },
    AlternateRoute_Points_Geometry_Y: { type: Number, optional: true },
    alternateRouteDesc: { type: String, optional: true },
    OrderInJsonId: { type: Number, required: true },
    Type: { type: String, required: true },
    Current_Time: { type: Number, required: true },
  })
);

function validateTraffic(traffic) {
  const schema = {
    id: Joi.number().required(),
    guid: Joi.string().optional(),
    source: Joi.string().optional(),
    title: Joi.string().optional(),
    description: Joi.string().optional(),
    delayMinutes: Joi.number().required(),
    validFrom: Joi.string().optional(),
    validTo: Joi.string().optional(),
    createdAt: Joi.string().optional(),
    changedAt: Joi.string().optional(),
    dbUpdate: Joi.string().optional(),
    city: Joi.string().optional(),
    street: Joi.string().optional(),
    houseNo: Joi.string().optional(),
    Type: Joi.string().required(),
    Current_Time: Joi.number().required(),
    district_ID: Joi.number().required(),
    district_Name: Joi.string().optional(),
    district_AreaLevel: Joi.number().required(),
    district_Parent_ID: Joi.number().required(),
    district_Parent_Name: Joi.string().optional(),
    district_Parent_Extent_XMIN: Joi.number().required(),
    district_Parent_Extent_XMAX: Joi.number().required(),
    district_Parent_Extent_YMIN: Joi.number().required(),
    district_Parent_Extent_YMAX: Joi.number().required(),
    district_Parent_Extent_SpatialReference_Wkid: Joi.number().required(),
    category_Code: Joi.string().optional(),
    category_Name: Joi.string().optional(),
    status_Code: Joi.string().optional(),
    status_Name: Joi.string().optional(),
    Location_Lines_Paths: Joi.array().optional(),
    Location_Polygons_Paths_Rings: Joi.array().optional(),
    Location_Points_Geometry_X: Joi.number().optional(),
    Location_Points_Geometry_Y: Joi.number().optional(),
    AlternateRoute_Lines_Geometry_Paths: Joi.array().optional(),
    AlternateRoute_Points_Geometry_X: Joi.number().optional(),
    AlternateRoute_Points_Geometry_Y: Joi.number().optional(),
    alternateRouteDesc: Joi.string().optional(),
    OrderInJsonId: Joi.number().required(),
  };

  return Joi.validate(traffic, schema);
}

exports.Traffic = Traffic;
exports.validate = validateTraffic;
